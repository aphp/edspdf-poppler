name: Upload Python Package

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      # We need to manually clone the repository with submodules because the poppler
      # repo does not allow specific commits to be directly fetched, and the github checkout action
      # split cloning into initial cloning and fetching submodules, which leads git to
      # only try to directly fetch the specific commit of the submodule.
      - name: Manually clone repository with submodules
        run: |
          git clone --recurse-submodules https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref }}

      # see pyproject.toml:tool.cibuildwheel section for parameters
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Manually clone repository with submodules
        run: |
          git clone --recurse-submodules https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
          git checkout ${{ github.ref }}

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

  PyPI:
    name: Upload to PyPI

    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: dist

    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1

  Documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2

      - name: Set PY variable
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV

      - name: Install dependencies
        run: pip install -r requirements-docs.txt

      - name: Set up Git
        run: |
          git config user.name ${{ github.actor }}
          git config user.email ${{ github.actor }}@users.noreply.github.com

      - name: Build documentation
        run: |
          git fetch origin gh-pages
          mike deploy --push --no-redirect --update-aliases $GITHUB_REF_NAME latest
